/*
:testPanel = ZUIPanel {
	parent = root
	hidden = 0
	panelColor = 0x80FF80FF
	layoutManual = 1
	layoutManual_x = 100
	layoutManual_y = 100
	layoutManual_w = 200
	layoutManual_h = 200
	
	:testButton = ZUIButton {
		text = "test"
	}
}
*/

/*
:picker = ZUIFilePicker {
	parent = root
	layout = border
	panelColor = 0x989898FF
	layout_padY = 10
	layout_padX = 10
	panelFrame = 4

	layoutManual = 1
	layoutManual_x = W w - 2 /
	layoutManual_y = H h - 2 /
	layoutManual_w = 400
	layoutManual_h = H 0.8 *
	*layout_cellFill = wh
	layout_sizeToMax = wh

	sendMsgOnOk = "type=Test"

	: = ZUIText {
		border_side = n
		font = header
		textColor = 0x000000FF
		text = "Open File"
	}

	: = ZUIFileList {
		border_side = c
		layout_forceH = H 10 -
		textEditorZUI = pickerTextEditor
		fileListFolderColor = 0xFFFF00FF
		fileListFileColor = 0xFFFFFFFF
		fileListMouseColor = 0x0000FF20
		fileListSelectedColor = 0x4040FFFF
	}

	: = ZUIPanel {
		panelColor = 0
		border_side = s
		: = ZUIButton {
			text = "Open"
			sendMsg = "type=ZUIFilePicker_OK"
		}
		: = ZUIButton {
			text = "Cancel"
			sendMsg = "type=ZUIFilePicker_Cancel"
		}
	}

	: = ZUITextEditor {
		border_side = s
		text = "*.mec"
	}

	:pickerTextEditor = ZUITextEditor {
		border_side = s
		text = "/prj/"
	}
}
*/


/*
:testPanel = ZUIPanel {
	// This can be used when prototyping zuis
	parent = root
	layoutManual = 1
	layoutManual_x = W w - 2 /
	layoutManual_y = H h - 2 /
	layoutManual_w = 400
	layoutManual_h = 600
	hidden = 0

	+style = styleGlobal

	layout = pack
	pack_side = t
	pack_fillOpposite = 1
	pack_fillLast = 1

	layout_indentL = 10
	layout_indentT = 10
	layout_indentR = 10
	layout_indentB = 10
	layout_padX = 4
	layout_padY = 4

	panelFrame = 4

	:testButton = ZUIButton {
		text = "test button"
		sendMsg = "type=
	}
		
	: = ZUIPanel {
		style = styleGroupL

		: = ZUIButton {
			text = "plain button"
		}

		: = ZUIButton {
			text = "selected button 1"
			toggle = 1
			selected = 1
		}
	}

	: = ZUIText {
		text = "This is some plain old text. Enough that it should word-wrap around the panel"
		wordWrap = 1
	}

	: = ZUITextEditor {
		style = styleTextEdit
		text = "This is a text editor that is a single line."
	}

	: = ZUITextEditor {
		text = "This is a text editor that is a multiple lines. I'm seeding it with something that should be multipine. In fact, there's various clipping bugs with this no doubt introduced when I got rid of scissoring"
		layout_forceH = 50
		multiline = 1
	}

	: = ZUIPanel {
		style = styleGroupL

		:testVar = ZUIVar {
			panelColor = 0
			panelFrame = 0
			textColor = 0xFFFFFFFF
			
			panelColorEditMode = 0x505050FF
			panelFrameEditMode = 2
			textColorEditMode = 0xFFFFFFFF

			stdNotationPowLimit = 3
			significantDigits = 3
			formatShortest = 1
			layout_forceW = 50
			zvar = Zuiplay_testVar
		}

		: = ZUIText {
			text = "This is some aligned text"
		}
	}

	: = ZUIPanel {
		// @TODO: These aren't drawn correctly
		// @TODO: These aren't functional
		//style = styleGroupTtoB
		pack_side = t
		layout_cellFill = w
		pack_fillOpposite = 1
		layout_indentL = 40
		layout_padY = 2
		
		: = ZUICheck {
			text = "Checking button"
		}

		:multiCheck = ZUICheckMulti {
			text = "Multi-state Checkbox"
		}

		: = ZUILine {
			lineEmbossed = 1
			layout_cellFill = w
		}

		: = ZUIRadioButton {
			text = "Radio 1"
		}

		: = ZUIRadioButton {
			text = "Radio 2"
		}
	}

	:leftSidedTabPanel = ZUITabPanel {
		layout_cellFill = wh
		layout = pack
		pack_side = l
		pack_fillOpposite = 1
		pack_fillLast = 1
		buttonSide = left
		layout_forceH = 200
		panelColor = 0x00FF00FF
		panelFrame = 3

		*layout_cellFill = wh

		:tabsPanel = ZUIPanel {
			panelColor = 0
			pack_side = t

			: = ZUITabButton {
				text = "1"
				slavePanel = 1
				selected = 1
			}
			: = ZUITabButton {
				text = "2"
				slavePanel = 2
			}
			: = ZUITabButton {
				text = "3"
				slavePanel = 3
			}
		}

		: = ZUIPanel {
			layout_indentT = 10
			layout_indentL = 10
			panelColor = 0
			hidden = 1
			slavePanel = 1
			: = ZUIButton {
				text = "This is panel 1"
			}
		}

		: = ZUIPanel {
			panelColor = 0
			hidden = 1
			slavePanel = 2
			: = ZUIText {
				text = "This is panel 2"
			}
		}

		: = ZUIPanel {
			panelColor = 0
			hidden = 1
			slavePanel = 3
			: = ZUICheck {
				text = "This is panel 3"
			}
		}
	}

	:topSidedTabPanel = ZUITabPanel {
		layout_cellFill = wh
		layout = pack
		pack_side = t
		buttonSide = top
		style = styleSunkenPanel1

		: = ZUIPanel {
			style = styleGroupLtoR
			layout_padX = 0

			: = ZUITabButton {
				text = "tab1"
				slavePanel = 1
				selected = 1
			}
			: = ZUITabButton {
				text = "tab2"
				slavePanel = 2
			}
			: = ZUITabButton {
				text = "tab3"
				slavePanel = 3
			}
		}

		: = ZUIPanel {
			hidden = 1
			slavePanel = 1
			: = ZUIButton {
				text = "This is panel 1"
			}
		}

		: = ZUIPanel {
			hidden = 1
			slavePanel = 2
			: = ZUIText {
				text = "This is panel 2"
			}
		}

		: = ZUIPanel {
			hidden = 1
			slavePanel = 3
			: = ZUICheck {
				text = "This is panel 3"
			}
		}
	}


	// @TODO: clean up all the color naming mess, etc w style sheets is easier
	// @TODO: finish testing of caching
	// @TODO: buttons should be flat but with very subtle lip edge

	// @TODO: scroll bars

	// @TODO: zui3ddirectionarrow.cpp
	// @TODO: zuibitmappainter.cpp
	// @TODO: zuifilepicker.cpp
	// @TODO: zuifpsgraph.cpp
	// @TODO: zuiline.cpp
	// @TODO: zuimatlight.cpp
	// @TODO: zuimenu.cpp
	// @TODO: zuipicture.cpp
	// @TODO: zuiplot.cpp
	// @TODO: zuipluginview.cpp
	// @TODO: zuislider.cpp
	// @TODO: zuivar.cpp
	// @TODO: zuivaredit.cpp
	// @TODO: zuivartexteditor.cpp
	// @TODO: zuivartwiddler.cpp

	// @TODO: implement keyboard control
}

*/

:testPanel = ZUIPanel {
	// This can be used when prototyping zuis
	parent = root
	layoutManual = 1
	layoutManual_x = W w - 2 /
	layoutManual_y = H h - 2 /
	layoutManual_w = W 0.8 *
	layoutManual_h = H 0.8 *
	hidden = 0

	+style = styleGlobal
	layout = pack
	pack_side = t

	:demo1 = ZUIPanel {
		layout = pack
		pack_side = t
		hidden = 0
	
		: = ZUIText {
			multiline = 1
			wordWrap = 1
			!multilineIgnoreWhitespace text
				The following is an example of top to bottom pack.\n
				Note how the containing panel (blue) expands to incorporate
				the largest child.
			!endmultiline
		}
		
		: = ZUIPanel {
			layout = pack
			pack_side = t
			panelColor = blue
			
			: = ZUIButton {
				text = "Button 1"
			}
			: = ZUIButton {
				text = "Button 2"
			}
			: = ZUIButton {
				text = "Longer Button 3"
			}
		}

		: = ZUILine {
		}
		
		: = ZUIButton {
			text = "Next"
			sendMsg = "type=ZUIHide toZUI=demo1; type=ZUIShow toZUI=demo2"
		}
	}

	:demo2 = ZUIPanel {
		layout = pack
		pack_side = t
		hidden = 1
	
		: = ZUIText {
			multiline = 1
			wordWrap = 1
			!multilineIgnoreWhitespace text
				The following is an example of filling and aligning elements within their cells.\n
				Note how button 1 which now has "layout_cellFill = w" expands into the width.\n
				Note how button 2 which now has "layout_cellAlign = c" centers itself.
			!endmultiline
		}
		
		: = ZUIPanel {
			layout = pack
			pack_side = t
			panelColor = blue
			
			: = ZUIButton {
				layout_cellFill = w
				text = "Button 1"
			}
			: = ZUIButton {
				layout_cellAlign = c
				text = "Button 2"
			}
			: = ZUIButton {
				text = "Longer Button 3"
			}
		}

		: = ZUILine {
		}
		
		: = ZUIButton {
			text = "Prev"
			sendMsg = "type=ZUIHide toZUI=demo2; type=ZUIShow toZUI=demo1"
		}

		: = ZUIButton {
			text = "Next"
			sendMsg = "type=ZUIHide toZUI=demo2; type=ZUIShow toZUI=demo3"
		}
	}
/*

	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following is an example of table layout.\n
			In this case, table_cols is set to 3.\n
			Note how the maximum child width determines the column sizes.
		!endmultiline
	}
	
	: = ZUIPanel {
		layout = table
		table_cols = 3
		panelColor = blue
		
		: = ZUIButton {
			text = "Button 1"
		}
		: = ZUIButton {
			text = "Button 2"
		}
		: = ZUIButton {
			text = "Longer Button 3"
		}
		: = ZUIButton {
			text = "Button 4"
		}
		: = ZUIButton {
			text = "B5"
		}
		: = ZUIButton {
			text = "Button 6"
		}
	}

	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following is an example of table layout using column weights.\n
			In this case, table_colWeight1 = 1, table_colWeight2 = 2, table_colWeight3 = 3\n
			Note how the table has expanded to the maximum width and the column widths are now 1:2:3
		!endmultiline
	}
	
	: = ZUIPanel {
		layout = table
		table_cols = 3
		table_colWeight1 = 1
		table_colWeight2 = 2
		table_colWeight3 = 3
		panelColor = blue
		
		: = ZUIButton {
			text = "Button 1"
		}
		: = ZUIButton {
			text = "Button 2"
		}
		: = ZUIButton {
			text = "Longer Button 3"
		}
		: = ZUIButton {
			text = "Button 4"
		}
		: = ZUIButton {
			text = "B5"
		}
		: = ZUIButton {
			text = "Button 6"
		}
	}

	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following is an example of table layout using evenly distributed column widths\n
			using table_colDistributeEvenly = 1\n
			Note how the table has expanded to the maximum width and the column widths are now 1:1:1
		!endmultiline
	}
	
	: = ZUIPanel {
		layout = table
		table_cols = 3
		table_colDistributeEvenly = 1
		panelColor = blue
		
		: = ZUIButton {
			text = "Button 1"
		}
		: = ZUIButton {
			text = "Button 2"
		}
		: = ZUIButton {
			text = "Longer Button 3"
		}
		: = ZUIButton {
			text = "Button 4"
		}
		: = ZUIButton {
			text = "B5"
		}
		: = ZUIButton {
			text = "Button 6"
		}
	}

	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following is an example of forcing the width of an element to a certain size.\n
			BUG/UNCLEAR BEHAVIOR. BOTH the button and the panel expanded to 50%!
		!endmultiline
	}
	
	: = ZUIPanel {
		layout = pack
		pack_side = t
		panelColor = blue
		
		: = ZUIButton {
			layout_forceW = 'W 0.5 *'
			text = "Button 1"
		}
		: = ZUIButton {
			text = "Button 2"
		}
	}

	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following is an example of forcing the width of an element to a certain size.\n
			Here the blue panel has been explicitly forced to be 50% of its parent width with\n
			the command: layout_forceW = 'W 0.5 *'\n
			The "W" means "the width of my parent" and the rest of the expression is RPN
			BUG! The fill and align properties are not working on the children!
		!endmultiline
	}
	
	: = ZUIPanel {
		layout = pack
		pack_side = t
		panelColor = blue
		layout_forceW = 'W 0.5 *'
		
		: = ZUIButton {
			layout_cellFill = w
			layout_cellAlign = c
			text = "Button 1"
		}
		: = ZUIButton {
			layout_cellFill = w
			layout_cellAlign = c
			text = "Button 2"
		}
	}
*/

/*
	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following is an example of adding padding.\n
			Here layout_padX = 10 and layout_padY = 2
		!endmultiline
	}
	
	: = ZUIPanel {
		layout = pack
		pack_side = t
		panelColor = blue
		layout_padX = 10
		layout_padY = 2
		
		: = ZUIButton {
			text = "Button 1"
		}
		: = ZUIButton {
			text = "Button 2"
		}
	}


	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following is an example of the border layout which permits putting elements
			into regions "north", "south", etc. If more than one element goes into a region it stacks vertically\n
			for north and south and horizontally for east and west
		!endmultiline
	}
	
	: = ZUIPanel {
		layout = border
		panelColor = blue
		
		: = ZUIButton {
			layout_cellAlign = c
			border_side = n
			text = "North"
		}
		: = ZUIButton {
			border_side = e
			text = "East"
		}
		: = ZUIButton {
			border_side = w
			text = "West 1"
		}
		: = ZUIButton {
			border_side = w
			text = "West 2"
		}
		: = ZUIButton {
			layout_cellAlign = c
			border_side = s
			text = "Bottom 1"
		}
		: = ZUIButton {
			layout_cellAlign = c
			border_side = s
			text = "Bottom 2"
		}
	}

	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			Border is a bit tricky to use.  You can place things into the corners like "ne" but
			only if you don't have something in the north.
		!endmultiline
	}
	
	: = ZUIPanel {
		layout = border
		panelColor = blue
		
		: = ZUIButton {
			layout_cellAlign = c
			border_side = ne
			text = "Northeast"
		}
		: = ZUIButton {
			layout_cellAlign = c
			border_side = e
			text = "East"
		}
		: = ZUIButton {
			border_side = w
			text = "West 1"
		}
		: = ZUIButton {
			border_side = w
			text = "West 2"
		}
		: = ZUIButton {
			layout_cellAlign = c
			border_side = s
			text = "Bottom 1"
		}
		: = ZUIButton {
			layout_cellAlign = c
			border_side = s
			text = "Bottom 2"
		}
	}


	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following is an example of manual layout\n
			The blue container has the following set:\n
			BUG: I can't parse the multiline when the following line is uncommented
			//"layoutManual = 1"\n
			"layoutManual_x = 20"\n
			"layoutManual_y = 20"\n
			"layoutManual_w = 100"\n
			"layoutManual_h = 100"\n
			Note how the y coordinate is relative to the BOTTOM
		!endmultiline
	}
	
	: = ZUIPanel {
		layoutManual = 1
		layoutManual_x = 20
		layoutManual_y = 20
		layoutManual_w = 100
		layoutManual_h = 100
		panelColor = blue
		
		: = ZUIButton {
			text = "Button 1"
		}
	}

	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			Manual layouts can be RPN expressions with the following symbols\n
			W = width of the parent\n
			H = height of the parent\n
			w = width of the child\n
			h = height of the child\n
			+ - * / have their usual meaning\n
			> < are greater than and less than comparisons\n
			^ takes the maximum of two args\n
			v takes the minimum of two args\n
			? is the first arg is true then pushes the second arg otherwise the third\n
		!endmultiline
	}
	
	: = ZUIPanel {
		layoutManual = 1
		layoutManual_x = 'W w - 2 /'
		layoutManual_y = 20
		layoutManual_w = 'W 5 / 50 ^'
			// Width is 1/5 of parent or 50 pixels whichever is greater
		layoutManual_h = 100
		panelColor = blue
		
		: = ZUIButton {
			text = "Button 1"
		}
	}
*/
/*
	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following demonstrates mixed layout by nesting panels.  The blue panel\n
			lays out top to bottom while the red and green layout left to right
		!endmultiline
	}
	
	: = ZUIPanel {
		panelColor = blue
		layout = pack
		pack_side = t
		
		: = ZUIPanel {
			panelColor = red
			layout = pack
			pack_side = l
			
			: = ZUIButton {
				text = "Button 1"
			}
			: = ZUIButton {
				text = "Button 2"
			}
		}
		
		: = ZUIPanel {
			panelColor = green
			layout = pack
			pack_side = l
			
			: = ZUIButton {
				text = "Second row, button 3"
			}
			: = ZUIButton {
				text = "Second row, button 4"
			}
		}
		
	}


	!createfont name=title file='verdana.ttf' size=14
	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following demonstrates a fancy "wizard" dialog box\n
		!endmultiline
	}
	
	: = ZUIPanel {
		panelUseColorGradient = 1
		panelColorGradient0 = 0xd0d0d0FF
		panelColorGradient1 = 0xc0c0c0FF
		panelColorGradient2 = 0xd0d0d0FF
		panelColorGradient3 = 0xc0c0c0FF
		panelFrame = 4
		
		layout_forceW = 500
		layout_forceH = 450

// BUG: For some reason if I get rid of this sub panel then the border system breaks
//		: = ZUIPanel {
//			panelColor = 0
//			layout_sizeToMax = wh
			layout = border
			layout_padX = 10
			layout_padY = 10
			layout_indentL = 15
			layout_indentR = 15

			: = ZUIText {
				border_side = n
				layout_cellAlign = c
				font = title
				textColor = 0x5050B0FF
				text = 'Calibration Wizard'
			}

			: = ZUILine {
				border_side = n
				lineEmbossed = 1
			}

			: = ZUIText {
				border_side = c
				wordWrap = 1
				!multilineIgnoreWhitespace text
					\nWelcome to the Shadow Garden Calibration Wizard.\n\n
					Shadow Garden uses a camera to allow the projection to be
					interactive.  The wizard will guide you though each step
					of calibrating the camera so that the interaction can work.\n\n
					First, check that you have done all of the following.  If you
					have not, you should quit the program and fix these issues
					before proceeding.  Refer to the documentation to address each one.\n\n
				!endmultiline
			}

			: = ZUIButton {
				border_side = se
				text = 'Begin >>'
			}

			: = ZUIButton {
				border_side = sw
				text = 'Cancel'
			}
		}
//	}

*/
/*	

	: = ZUIText {
		multiline = 1
		wordWrap = 1
		!multilineIgnoreWhitespace text
			The following demonstrates a scrolling panel
		!endmultiline
	}
	
	: = ZUIPanel {
		panelColor = blue
		layout = pack
		pack_side = t
		permitScrollY = 1
			// Bug, scroll should clip
		permitScrollX = 1
			// Bug, scrollX doesn't seem right
		layout_forceH = 100
		layout_forceW = 50
		clipToBounds = 1
			// BUG: When clip is on, text is clipped but not buttons

		: = ZUIButton {
			text = "Button 1"
		}
		: = ZUIButton {
			text = "Button 2"
		}
		: = ZUIButton {
			text = "Button 3"
		}
		: = ZUIButton {
			text = "Button 4"
		}
		: = ZUIButton {
			text = "Button 4"
		}
		: = ZUIButton {
			text = "Button 4"
		}
		: = ZUIButton {
			text = "Button 4"
		}
		: = ZUIButton {
			text = "Button 4"
		}
	}
*/
}

// TODO: show different panel type, panel gradients
// radio buttons, check buttons, text inputs
// show selectd buttons, sending messages
// show styles
// More table examples?
// Show ZUISet
// test layout_forceW aand H more
// Make layoutManeual be more consistent with the form "layout = manual"
// file open
// tab panel
